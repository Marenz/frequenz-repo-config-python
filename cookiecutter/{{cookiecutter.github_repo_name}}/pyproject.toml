# License: {{cookiecutter.license}}
# Copyright Â© {% now 'utc', '%Y' %} {{cookiecutter.author_name}}

[build-system]
requires = [
  "setuptools == 68.1.0",
  "setuptools_scm[toml] == 7.1.0",
  "frequenz-repo-config[{{cookiecutter.type}}] == 0.5.2",
]
build-backend = "setuptools.build_meta"

[project]
name = "{{cookiecutter.pypi_package_name}}"
description = "{{cookiecutter.description}}"
readme = "README.md"
license = { text = "{{cookiecutter.license}}" }
keywords = {{cookiecutter | keywords}}
# TODO(cookiecutter): Remove and add more classifiers if appropriate
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  {%- if cookiecutter.license == "MIT" %}
  "License :: OSI Approved :: MIT License",
  {%- elif cookiecutter.license == "Propietary" %}
  "License :: Other/Proprietary License",
  {%- endif %}
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  {%- if cookiecutter.type != "app" %}
  "Topic :: Software Development :: Libraries",
  {%- endif %}
  "Typing :: Typed",
]
requires-python = ">= 3.11, < 4"
# TODO(cookiecutter): Remove and add more dependencies if appropriate
{%- if cookiecutter.type in ("app", "actor", "model") %}
dependencies = [
  "typing-extensions == 4.5.0",
  # Make sure to update the version for cross-referencing also in the
  # mkdocs.yml file when changing the version here (look for the config key
  # plugins.mkdocstrings.handlers.python.import)
  "frequenz-sdk == 0.24.0",
]
{%- elif cookiecutter.type == "api" %}
dependencies = [
  "frequenz-api-common >= 0.3.1, < 0.4.0",
  "googleapis-common-protos >= 1.56.2, < 2",
  "grpcio >= 1.51.1, < 2",
]
{%- else %}
dependencies = [
  "typing-extensions >= 4.5.0, < 5",
]
{%- endif %}
dynamic = ["version"]

[[project.authors]]
name = "{{cookiecutter.author_name}}"
email = "{{cookiecutter.author_email}}"

# TODO(cookiecutter): Remove and add more optional dependencies if appropriate
[project.optional-dependencies]
dev-docstrings = [
  "pydocstyle == 6.3.0",
  "darglint == 1.8.1",
  "tomli == 2.0.1",      # Needed by pydocstyle to read pyproject.toml
]
dev-formatting = ["black == 23.7.0", "isort == 5.12.0"]
dev-mkdocs = [
  "mike == 1.1.2",
  "mkdocs-gen-files == 0.5.0",
  "mkdocs-literate-nav == 0.6.0",
  "mkdocs-material == 9.1.21",
  "mkdocs-section-index == 0.3.5",
  "mkdocstrings[python] == 0.22.0",
  "frequenz-repo-config[{{cookiecutter.type}}] == 0.5.2",
]
dev-mypy = [
  "mypy == 1.5.1",
  # For checking the noxfile, docs/ script, and tests
  "{{cookiecutter.pypi_package_name}}[dev-mkdocs,dev-noxfile,dev-pytest]",
]
dev-noxfile = [
  "nox == 2023.4.22",
  "frequenz-repo-config[{{cookiecutter.type}}] == 0.5.2",
]
dev-pylint = [
  "pylint == 2.17.5",
  # For checking the noxfile, docs/ script, and tests
  "{{cookiecutter.pypi_package_name}}[dev-mkdocs,dev-noxfile,dev-pytest]",
]
dev-pytest = [
  "pytest == 7.4.0",
  "frequenz-repo-config[extra-lint-examples] == 0.5.2",
{%- if cookiecutter.type != "api" %}
  "pytest-mock == 3.11.1",
  "pytest-asyncio == 0.21.1",
  "async-solipsism == 0.5",
{%- endif %}
]
dev = [
  "{{cookiecutter.pypi_package_name}}[dev-mkdocs,dev-docstrings,dev-formatting,dev-mkdocs,dev-mypy,dev-noxfile,dev-pylint,dev-pytest]",
]

[project.urls]
Changelog = "https://github.com/{{cookiecutter.github_org}}/{{cookiecutter.github_repo_name}}/releases"
Issues = "https://github.com/{{cookiecutter.github_org}}/{{cookiecutter.github_repo_name}}/issues"
Repository = "https://github.com/{{cookiecutter.github_org}}/{{cookiecutter.github_repo_name}}"
Support = "https://github.com/{{cookiecutter.github_org}}/{{cookiecutter.github_repo_name}}/discussions/categories/support"

[tool.black]
line-length = 88
target-version = ['py311']
{%- if cookiecutter.type != "api" %}
include = '\.pyi?$'
{%- endif %}

[tool.isort]
profile = "black"
line_length = 88
{#- We don't include "py" here for API because we don't want to check generated files #}
src_paths = ["benchmarks", "examples", "src", "tests"]

[tool.pylint.similarities]
ignore-comments = ['yes']
ignore-docstrings = ['yes']
ignore-imports = ['no']
min-similarity-lines = 40

[tool.pylint.messages_control]
disable = [
  "too-few-public-methods",
  # disabled because it conflicts with isort
  "wrong-import-order",
  "ungrouped-imports",
  # pylint's unsubscriptable check is buggy and is not needed because
  # it is a type-check, for which we already have mypy.
  "unsubscriptable-object",
]

[tool.pytest.ini_options]
{%- if cookiecutter.type != "api" %}
testpaths = ["tests", "src"]
asyncio_mode = "auto"
required_plugins = ["pytest-asyncio", "pytest-mock"]
{%- else %}
testpaths = ["pytests"]
{%- endif %}
{%- if cookiecutter.type != "api" %}

[[tool.mypy.overrides]]
module = ["async_solipsism", "async_solipsism.*", "sybil", "sybil.*"]
ignore_missing_imports = true
{%- endif %}
{%- if cookiecutter.type == "api" %}

[tool.setuptools.package-dir]
"" = "py"

[tool.setuptools.package-data]
"*" = ["*.pyi"]
{%- endif %}

[tool.setuptools_scm]
version_scheme = "post-release"
